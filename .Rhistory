scale_y_continuous(breaks = scales::pretty_breaks(n = 7)
) +
annotate("text", y = annotate_xy[8], x = annotate_xy[7], ##### HERE IS CHANGE VALUE
parse = TRUE, size = 5,
label = as.expression(bquote(d~"="~.(params_true[[4]])))) + ##### HERE IS CHANGE SYMBOL AND VALUE
labs(
x = expression("Samples of parameter" ~ d), ##### HERE IS CHANGE SYMBOL
y = "Density")
hist_plots = grid.arrange(beta1_plot, beta2_plot, gamma_plot, d_plot, nrow = 2)
return(hist_plots)
}
hist_plot_w_prior_1 = gg_hist_plot_w_prior(res_one, params, 10000, c(0.001, 1, 0.001, 1, 0.001, 1, 0, 20), c(0.02, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.03, 0, 0.0014, 0, 0.25, 2, 9))
trace_plot_betas_1 = gg_trace_plot_betas(res_one, params, 10000, c(5000, 0.025, 7000, 0.0013), c(0, 0.03, 0, 0.0015))
hist_plot_w_prior_1 = gg_hist_plot_w_prior(res_one, params, 10000, c(0.001, 1, 0.001, 1, 0.001, 1, 0, 20), c(0.02, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.03, 0, 0.0014, 0, 0.25, 2, 9))
set.seed(1106)
## Run the algorithm
start.time <- Sys.time()
res.list.reparam_one <- MCMC_reparam(N.its = 100000, N = 100, inf.ids, rem.times, distance_mat,
lambda.b1 = 1, nu.b1 = 1, lambda.g = 1 , nu.g = 1,
inc.beta1 = list(0.007, T), inc.p = list(0.00007, T), inc.dist = list(5, T),
inc.inf.times = list(NA, T), inc.gamma = list(0.11, T),
d.upper = 15, sigmap = 0.05, sigmad = 0.3, infupdate = 2)
res.reparam_one <- res.list.reparam_one[[1]]
end.time <- Sys.time()
print(c("Total Run Time:", end.time - start.time))
hist_plot_w_prior_reparam = gg_hist_plot_w_prior(res.reparam_one, params, 10000, c(1, 1, 1, 1, 1, 1, 0, 20), c(0.0175, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.0225, 0, 0.00125, 0, 0.25, 2, 10))
hist_plot_bp_w_prior_reparam = gg_hist_plot_w_prior_reparam(res.reparam_one, params, 10000, c(1, 1, 0, 1, 1, 1, 0, 20), c(0.0175, 100, 0.1, 10, 0.2, 8, 8, 0.4), c(0, 0.0225, 0, 0.15, 0, 0.25, 2, 10))
# Rmarkdown settings
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, eval= TRUE, message = FALSE, cache.path = "Caches/", fig.path = "Figures/HeteroUnif/")
# Default to non-scientific notation
options(scipen=999)
# Suppress summarise info
options(dplyr.summarise.inform = FALSE)
## Data manipulation
library(tidyverse)
## Plotting
library(ggplot2)
library(ggcorrplot)
source("VisualisationFunctions.R")
library(plotMCMC) # autocorrelation plots and other diagnostic plots
## MCMC Diagnostics
library(coda)
## Epidemics
library(EpidemicR) # For simulating and making inference on GSE epidemics
## Write up
library(xtable)
epi_list <- readRDS(file="../Data/HeteroUnif/epi_list.RData")
# Distance matrix
spatial <- epi_list[[1]]
xy.coords <- spatial[[1]]
distance_mat <- spatial[[2]]
# Associated infection rate matrix
params <- epi_list[[2]]
rate_mat <- epi_list[[3]]
# Simulated epidemic
Homo_sim <- epi_list[[4]]
# Total number of infected
n_I = sum(Homo_sim[,2] < Inf)
# Who is infected
inf.ids <- which(Homo_sim[,2] < Inf)
# Infection times
inf.times <- Homo_sim[,2]
# Removal times
rem.times <- Homo_sim[,3]
# Plot the epidemic
epi_plot = EpidemicR::Plot_epidemic(xy.coords, Homo_sim, init.inf = c(1))
epi_curve_plot = epidemic_curves_plot(inf.times, rem.times, inf.ids)
epi_curve_plot
set.seed(1105)
## Run the algorithm
start.time <- Sys.time()
res.list_one <- MCMC(N.its = 100000, N = 100, inf.ids, rem.times, distance_mat,
lambda.b1 = 1, nu.b1 = 1, lambda.b2 = 1, nu.b2 = 1, lambda.g = 1 , nu.g = 1,
inc.beta1 = list(0.007, T), inc.beta2 = list(0.00007, T), inc.dist = list(5, T),
inc.inf.times = list(NA, T), inc.gamma = list(0.11, T),
d.upper = 15, sigmab1 = 0.5, sigmab2 = 1.2, sigmad = 0.2, infupdate = 2)
res_one <- res.list_one[[1]]
end.time <- Sys.time()
print(c("Total Run Time:", end.time - start.time))
coda::effectiveSize(res_one)
apply(res_one, 2, function(column) {
quantiles <- quantile(column, c(0.025, 0.975))
rounded_quantiles <- signif(quantiles, digits = 3)  # Round to 3 significant figures
return(rounded_quantiles)
})
apply(res_one[ , ], 2, function(column) {
std_dev <- sd(column)  # Calculate standard deviation
rounded_std_dev <- signif(std_dev, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
coda::effectiveSize(res_one)
print("   ")
apply(res_one, 2, function(column) {
quantiles <- quantile(column, c(0.025, 0.975))
rounded_quantiles <- signif(quantiles, digits = 3)  # Round to 3 significant figures
return(rounded_quantiles)
})
print("   ")
apply(res_one[ , ], 2, function(column) {
std_dev <- sd(column)  # Calculate standard deviation
rounded_std_dev <- signif(std_dev, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
coda::effectiveSize(res_one)
print(\f)
coda::effectiveSize(res_one)
print(/f)
coda::effectiveSize(res_one)
print(f')
apply(res_one, 2, function(column) {
quantiles <- quantile(column, c(0.025, 0.975))
rounded_quantiles <- signif(quantiles, digits = 3)  # Round to 3 significant figures
return(rounded_quantiles)
})
print("   ")
apply(res_one[ , ], 2, function(column) {
std_dev <- sd(column)  # Calculate standard deviation
rounded_std_dev <- signif(std_dev, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
coda::effectiveSize(res_one)
apply(res_one, 2, function(column) {
quantiles <- quantile(column, c(0.025, 0.975))
rounded_quantiles <- signif(quantiles, digits = 3)  # Round to 3 significant figures
return(rounded_quantiles)
})
apply(res_one[ , ], 2, function(column) {
std_dev <- sd(column)  # Calculate standard deviation
rounded_std_dev <- signif(std_dev, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
summary(res_one[-(1:5000), 2:5])
## Summarise the results
summary(res_one[-(1:5000), 2:5])
Avg_acc_probs(res.list_one, F)
hex_b1_gamma_1 = gg_hex_plot_beta1_gamma(res_one[-(1:5000),], params_true, c(0.08,0.25,  0.08,0.22,  0.08,0.04,  0.08,0.01), c(0, 0.091), c(0, 0.26))
hex_b2_gamma_1 = gg_hex_plot_beta2_gamma(res_one[-(1:5000),], params_true, c(0.0019,0.25,  0.0019,0.22,  0.0019,0.04,  0.0019,0.01), c(0, 0.0022), c(0, 0.26))
hex_b1_b2_1 = gg_hex_plot_beta1_beta2(res_one[-(1:5000),], params_true, c(0.036,0.0017,  0.075,0.0017,  0.035,0.0019,  0.075,0.0019), c(0, 0.091), c(0, 0.0019))
hex_b1_d_1 = gg_hex_plot_beta1_d(res_one[-(1:5000),], params_true, c(0.036,7.5,  0.075,7.5,  0.035,6.5,  0.075,6.5), c(0, 0.091), c(1.35, 8))
hex_b2_d_1 = gg_hex_plot_beta2_d(res_one[-(1:5000),], params_true, c(0.00165,8,  0.00165,7.25,  0.0008,8,  0.0008,7.25), c(0, 0.0019), c(1.35, 8))
hex_d_gamma_1 = gg_hex_plot_d_gamma(res_one[-(1:5000),], params_true, c(1.7,0,  3.2,0,  5,0,  7,0), c(1.35, 8), c(0, 0.26))
hex_b1_gamma_1 = gg_hex_plot_beta1_gamma(res_one[-(1:5000),], params_true, c(0.08,0.25,  0.08,0.22,  0.08,0.04,  0.08,0.01), c(0, 0.091), c(0, 0.26))
## Data manipulation
library(tidyverse)
## Plotting
library(ggplot2)
library(ggcorrplot)
source("VisualisationFunctions.R")
library(plotMCMC) # autocorrelation plots and other diagnostic plots
## MCMC Diagnostics
library(coda)
## Epidemics
library(EpidemicR) # For simulating and making inference on GSE epidemics
## Write up
library(xtable)
hex_b1_gamma_1 = gg_hex_plot_beta1_gamma(res_one[-(1:5000),], params_true, c(0.08,0.25,  0.08,0.22,  0.08,0.04,  0.08,0.01), c(0, 0.091), c(0, 0.26))
View(res_one)
g_hex_plot_beta1_gamma(res_one[-(1:5000),], params_true, c(0.08,0.25,  0.08,0.22,  0.08,0.04,  0.08,0.01), c(0, 0.091), c(0, 0.26))
gg_hex_plot_beta1_gamma(res_one[-(1:5000),], params_true, c(0.08,0.25,  0.08,0.22,  0.08,0.04,  0.08,0.01), c(0, 0.091), c(0, 0.26))
contour_b1_gamma_1 = gg_contour_plot_b1_gamma(res_one, params, 10000, c(0, 0.04), c(0, 0.175))
contour_b2_gamma_1 = gg_contour_plot_b2_gamma(res_one, params, 10000, c(0, 0.0022), c(0, 0.175))
contour_b1_b2_1 = gg_contour_plot_b1_b2(res_one, params, 10000, c(0, 0.015), c(0, 0.0019))
contour_b1_d_1 = gg_contour_plot_b1_d(res_one, params, 10000, c(0, 0.015), c(3, 6.25))
contour_b2_d_1 = gg_contour_plot_b2_d(res_one, params, 10000, c(0, 0.0019), c(1.35, 6.25))
contour_d_gamma_1 = gg_contour_plot_d_gamma(res_one, params, 10000, c(1.35, 6.25), c(0, 0.26))
contour_b1_gamma_1
gg_hist_plot_w_prior(res_one, params, 10000, c(1, 1, 1, 1, 1, 1, 0, 20), c(0.02, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.03, 0, 0.0014, 0, 0.25, 2, 9))
set.seed(1106)
## Run the algorithm
start.time <- Sys.time()
res.list.reparam_one <- MCMC_reparam(N.its = 100000, N = 100, inf.ids, rem.times, distance_mat,
lambda.b1 = 1, nu.b1 = 1, lambda.g = 1 , nu.g = 1,
inc.beta1 = list(0.007, T), inc.p = list(0.00007, T), inc.dist = list(5, T),
inc.inf.times = list(NA, T), inc.gamma = list(0.11, T),
d.upper = 15, sigmap = 0.05, sigmad = 0.3, infupdate = 2)
res.reparam_one <- res.list.reparam_one[[1]]
end.time <- Sys.time()
print(c("Total Run Time:", end.time - start.time))
coda::effectiveSize(res.reparam_one)
apply(res.reparam_one, 2, function(column) {
quantiles <- quantile(column, c(0.025, 0.975))
rounded_quantiles <- signif(quantiles, digits = 3)  # Round to 3 significant figures
return(rounded_quantiles)
})
apply(res.reparam_one[ , ], 2, function(column) {
std_dev <- sd(column)  # Calculate standard deviation
rounded_std_dev <- signif(std_dev, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
## Summarise the results
summary(res.reparam_one[-(1:5000), 2:5])
Avg_acc_probs(res.list.reparam_one, T)
contour_b1_gamma_reparam = gg_contour_plot_b1_gamma(res.reparam_one, params, 10000, c(0, 0.04), c(0, 0.175))
contour_b1_gamma_reparam
hist_plot_bp_w_prior_reparam = gg_hist_plot_w_prior_reparam(res.reparam_one, params, 10000, c(1, 1, 0, 1, 1, 1, 0, 20), c(0.0175, 100, 0.1, 10, 0.2, 8, 8, 0.4), c(0, 0.0225, 0, 0.15, 0, 0.25, 2, 10))
hist_plot_bp_w_prior_reparam
hist_plot_w_prior_reparam = gg_hist_plot_w_prior(res.reparam_one, params, 10000, c(1, 1, 1, 1, 1, 1, 0, 20), c(0.0175, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.0225, 0, 0.00125, 0, 0.25, 2, 10))
hist_plot_w_prior_reparam
trace_plot_betas_reparam_1 = gg_trace_plot_betas(res.reparam_one, params, 10000, c(23000, 0.025, 23000, 0.0013), c(0, 0.03, 0, 0.0015))
gg_hist_plot_w_prior(res.reparam_one, params, 10000, c(1, 1, 1, 1, 1, 1, 0, 20), c(0.0175, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.0225, 0, 0.00125, 0, 0.25, 2, 10))
## Plot the results
trace_plot_betas_1 = gg_trace_plot_betas(res_one, params, 10000, c(5000, 0.025, 7000, 0.0013), c(0, 0.03, 0, 0.0015))
trace_plot_gammad_1 = gg_trace_plot_gammad(res_one, params, 10000, c(3000, 0.025, 3000, 3), c(0.01, 0.25, 2.5, 7))
# aaa = gg_trace_plot_bp(res_one, params, 10000, c(20000, 0.025, 18000, 0.25), c(0, 0.03, 0, 0.3))
hist_plot_1 = gg_hist_plot(res_one, params, 10000, c(0.02, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.03, 0, 0.0014, 0, 0.25, 2, 9))
hist_plot_w_prior_1 = gg_hist_plot_w_prior(res_one, params, 10000, c(1, 1, 1, 1, 1, 1, 0, 20), c(0.02, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.03, 0, 0.0014, 0, 0.25, 2, 9))
## Save the results
ggsave(filename = "../Visualisation/HeteroUnif/trace_betas.png", plot = trace_plot_betas_1, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/trace_gammad.png", plot = trace_plot_gammad_1, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/hist_plot.png", plot = hist_plot_1, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/hist_plot_w_prior.png", plot = hist_plot_w_prior_1, width = 10, height = 8)
contour_b1_gamma_reparam = gg_contour_plot_b1_gamma(res.reparam_one, params, 10000, c(0, 0.04), c(0, 0.175))
contour_b2_gamma_reparam = gg_contour_plot_b2_gamma(res.reparam_one, params, 10000, c(0, 0.0022), c(0, 0.175))
contour_b1_b2_reparam = gg_contour_plot_b1_b2(res.reparam_one, params, 10000, c(0, 0.015), c(0, 0.0019))
contour_b1_d_reparam = gg_contour_plot_b1_d(res.reparam_one, params, 10000, c(0, 0.015), c(3, 6.25))
contour_b2_d_reparam = gg_contour_plot_b2_d(res.reparam_one, params, 10000, c(0, 0.0019), c(4, 6.25))
contour_d_gamma_reparam = gg_contour_plot_d_gamma(res.reparam_one, params, 10000, c(4, 6.25), c(0, 0.26))
ggsave(filename = "../Visualisation/HeteroUnif/contour_b1_gamma_reparam.png", plot = contour_b1_gamma_reparam, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/contour_b2_gamma_reparam.png", plot = contour_b2_gamma_reparam, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/contour_b1_b2_reparam.png", plot = contour_b1_b2_reparam, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/contour_b1_d_reparam.png", plot = contour_b1_d_reparam, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/contour_b2_d_reparam.png", plot = contour_b2_d_reparam, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/contour_d_gamma_reparam.png", plot = contour_d_gamma_reparam, width = 10, height = 8)
## Plot the results
trace_plot_betas_reparam_1 = gg_trace_plot_betas(res.reparam_one, params, 10000, c(23000, 0.025, 23000, 0.0013), c(0, 0.03, 0, 0.0015))
trace_plot_gammad_reparam_1 = gg_trace_plot_gammad(res.reparam_one, params, 10000, c(3000, 0.025, 20000, 3), c(0.01, 0.25, 2.5, 7))
trace_plot_bp_reparam_1 = gg_trace_plot_bp(res.reparam_one, params, 10000, c(23000, 0.025, 27000, 0.175), c(0, 0.03, 0, 0.2))
hist_plot_betas_reparam_1 = gg_hist_plot(res.reparam_one, params, 10000, c(0.0175, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.0225, 0, 0.00125, 0, 0.25, 2, 10))
hist_plot_bp_reparam_1 = gg_hist_plot_reparam(res.reparam_one, params, 10000, c(0.0175, 100, 0.1, 10, 0.2, 8, 8, 0.4), c(0, 0.0225, 0, 0.15, 0, 0.25, 2, 10))
hist_plot_w_prior_reparam = gg_hist_plot_w_prior(res.reparam_one, params, 10000, c(1, 1, 1, 1, 1, 1, 0, 20), c(0.0175, 90, 0.001, 1500, 0.2, 8, 8, 0.4), c(0, 0.0225, 0, 0.00125, 0, 0.25, 2, 10))
hist_plot_bp_w_prior_reparam = gg_hist_plot_w_prior_reparam(res.reparam_one, params, 10000, c(1, 1, 0, 1, 1, 1, 0, 20), c(0.0175, 100, 0.1, 10, 0.2, 8, 8, 0.4), c(0, 0.0225, 0, 0.15, 0, 0.25, 2, 10))
## Save the results
ggsave(filename = "../Visualisation/HeteroUnif/trace_betas_reparam.png", plot = trace_plot_betas_reparam_1, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/trace_gammad_reparam.png", plot = trace_plot_gammad_reparam_1, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/trace_bp_reparam.png", plot = trace_plot_bp_reparam_1, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/hist_plot_betas_reparam.png", plot = hist_plot_betas_reparam_1, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/hist_plot_bp_reparam.png", plot = hist_plot_bp_reparam_1, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/hist_plot_w_prior_reparam.png", plot = hist_plot_w_prior_reparam, width = 10, height = 8)
ggsave(filename = "../Visualisation/HeteroUnif/hist_plot_bp_w_prior_reparam.png", plot = hist_plot_bp_w_prior_reparam, width = 10, height = 8)
# Rmarkdown settings
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, eval= TRUE, message = FALSE, cache.path = "Caches/", fig.path = "Figures/HeteroUnif/")
# Default to non-scientific notation
options(scipen=999)
# Suppress summarise info
options(dplyr.summarise.inform = FALSE)
## Data manipulation
library(tidyverse)
## Plotting
library(ggplot2)
library(ggcorrplot)
source("VisualisationFunctions.R")
library(plotMCMC) # autocorrelation plots and other diagnostic plots
## MCMC Diagnostics
library(coda)
## Epidemics
library(EpidemicR) # For simulating and making inference on GSE epidemics
## Write up
library(xtable)
epi_list <- readRDS(file="../Data/HeteroUnif/epi_list.RData")
# Distance matrix
spatial <- epi_list[[1]]
xy.coords <- spatial[[1]]
distance_mat <- spatial[[2]]
# Associated infection rate matrix
params <- epi_list[[2]]
rate_mat <- epi_list[[3]]
# Simulated epidemic
Homo_sim <- epi_list[[4]]
# Total number of infected
n_I = sum(Homo_sim[,2] < Inf)
# Who is infected
inf.ids <- which(Homo_sim[,2] < Inf)
# Infection times
inf.times <- Homo_sim[,2]
# Removal times
rem.times <- Homo_sim[,3]
# Plot the epidemic
epi_plot = EpidemicR::Plot_epidemic(xy.coords, Homo_sim, init.inf = c(1))
epi_curve_plot = epidemic_curves_plot(inf.times, rem.times, inf.ids)
epi_curve_plot
set.seed(1106)
## Run the algorithm
start.time <- Sys.time()
res.list.reparam_one <- MCMC_reparam(N.its = 100000, N = 100, inf.ids, rem.times, distance_mat,
lambda.b1 = 1, nu.b1 = 1, lambda.g = 1 , nu.g = 1,
inc.beta1 = list(0.007, T), inc.p = list(0.00007, T), inc.dist = list(5, T),
inc.inf.times = list(NA, T), inc.gamma = list(0.11, T),
d.upper = 15, sigmap = 0.05, sigmad = 0.3, infupdate = 2)
res.reparam_one <- res.list.reparam_one[[1]]
end.time <- Sys.time()
print(c("Total Run Time:", end.time - start.time))
# Rmarkdown settings
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, eval= TRUE, message = FALSE, cache.path = "Caches/", fig.path = "Figures/cbHomo/")
# Default to non-scientific notation
options(scipen=999)
# Suppress summarise info
options(dplyr.summarise.inform = FALSE)
## Data manipulation
library(tidyverse)
## Plotting
library(ggplot2)
library(ggcorrplot)
source("SEIRVisualisationFunctions.R")
## MCMC Diagnostics
library(coda)
## Epidemics
library(EpidemicR) # For simulating and making inference on GSE epidemics
## Write up
library(xtable)
# Associated infection rate matrix
params <- c(0.25, 0.08, 0.22)
# Simulated states
# sim_states <- read.csv("Data/simulated_data.csv", header = F)
# Simulated events
# sim_events <- read.csv("Data/simulated_track.csv", header = F)
# Simulated states
sim_states <- read.csv("Data/simulated_data_1000_agg_1.csv", header = F)
# Simulated events
sim_events <- read.csv("Data/simulated_track_1000_agg_1.csv", header = F)
# Load in the inference
res_11 = read.csv("Inference/Set 1/agg_point2/res.csv")
other_res_11 = read.csv("Inference/Set 1/agg_30/other_res.csv")
aug_res_11 = read.csv("Inference/Set 1/agg_30/aug_res.csv")
## Summarise the results
summary(res_11[-(1:500000), 1:3])
summary(other_res_11[-(1:500000), c(3,5,6)])
summary(aug_res_11[-(1:500000), c(1,5,9,13)])
coda::effectiveSize(res_11)
apply(res_11, 2, function(column) {
quantiles <- quantile(column, c(0.025, 0.975))
rounded_quantiles <- signif(quantiles, digits = 3)  # Round to 3 significant figures
return(rounded_quantiles)
})
apply(res_11[-(1:500000) , ], 2, function(column) {
std_dev <- sd(column)  # Calculate standard deviation
rounded_std_dev <- signif(std_dev, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
## Summarise the results
# summary(res_11[-(1:500000), 1:3])
# summary(other_res_11[-(1:500000), c(3,5,6)])
# summary(aug_res_11[-(1:500000), c(1,5,9,13)])
apply(res_11[-(1:500000) , ], 2, function(column) {
mean <- mean(column)  # Calculate standard deviation
rounded_std_dev <- signif(mean, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
apply(res_11[-(1:500000) , ], 2, function(column) {
quantiles <- quantile(column, c(0.025, 0.975))
rounded_quantiles <- signif(quantiles, digits = 3)  # Round to 3 significant figures
return(rounded_quantiles)
})
apply(res_11[-(1:500000) , ], 2, function(column) {
std_dev <- sd(column)  # Calculate standard deviation
rounded_std_dev <- signif(std_dev, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
coda::effectiveSize(res_11)
rounded_std_dev <- signif(mean, digits = 5)  # Round to 3 significant figures
## Summarise the results
# summary(res_11[-(1:500000), 1:3])
# summary(other_res_11[-(1:500000), c(3,5,6)])
# summary(aug_res_11[-(1:500000), c(1,5,9,13)])
apply(res_11[-(1:500000) , ], 2, function(column) {
mean <- mean(column)  # Calculate standard deviation
rounded_std_dev <- signif(mean, digits = 5)  # Round to 3 significant figures
return(rounded_std_dev)
})
apply(res_11[-(1:500000) , ], 2, function(column) {
quantiles <- quantile(column, c(0.025, 0.975))
rounded_quantiles <- signif(quantiles, digits = 3)  # Round to 3 significant figures
return(rounded_quantiles)
})
apply(res_11[-(1:500000) , ], 2, function(column) {
std_dev <- sd(column)  # Calculate standard deviation
rounded_std_dev <- signif(std_dev, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
coda::effectiveSize(res_11)
# Rmarkdown settings
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, eval= TRUE, message = FALSE, cache.path = "Caches/", fig.path = "Figures/cbHomo/")
# Default to non-scientific notation
options(scipen=999)
# Suppress summarise info
options(dplyr.summarise.inform = FALSE)
## Data manipulation
library(tidyverse)
## Plotting
library(ggplot2)
library(ggcorrplot)
source("SEIRVisualisationFunctions.R")
## MCMC Diagnostics
library(coda)
## Epidemics
library(EpidemicR) # For simulating and making inference on GSE epidemics
## Write up
library(xtable)
gg_hist_plot_w_prior <- function(results, params_true, burn_in, annotate_xy, x_limits, priorhp){
df = data.frame(samples = results[, 4], b = results[, 1], g = results[, 2], d = results[, 3])
num_samples = nrow(df)
df_burn_in <- df %>%
mutate(burnin = c(rep("yes", burn_in), rep("no", (num_samples - burn_in))))
beta_plot = df_burn_in %>%
ggplot(aes(x = b, y = ..density..)) +
geom_histogram(fill = "#f5c04a", colour = "grey15", alpha = 0.85) +
geom_vline(aes(xintercept = params_true[1]), size = 1.1, linetype = 2,
colour = '#4f5157') +
scale_x_continuous(breaks = scales::pretty_breaks(n = 5),
limits = c(x_limits[1], x_limits[2])) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 7)
) +
annotate("text", y = annotate_xy[2], x = annotate_xy[1], ##### HERE IS CHANGE VALUE
parse = TRUE, size = 5,
label = as.expression(bquote(beta~"="~.(params_true[[1]])))) + ##### HERE IS CHANGE SYMBOL AND VALUE
labs(
x = expression("Samples of parameter" ~ beta), ##### HERE IS CHANGE SYMBOL
y = "Density")   +
stat_function(aes(y = NULL),
fun=dgamma,
args=list(shape=priorhp[1], rate=priorhp[2]),
colour = "lightblue", geom="area", fill="lightblue", alpha=0.2)
g_plot = df_burn_in %>%
ggplot(aes(x = g, y = ..density..)) +
geom_histogram(fill = "#f5c04a", colour = "grey15", alpha = 0.85) +
geom_vline(aes(xintercept = params_true[2]), size = 1.1, linetype = 2,
colour = '#4f5157') +
scale_x_continuous(breaks = scales::pretty_breaks(n = 5),
limits = c(x_limits[3], x_limits[4])) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 7)
) +
annotate("text", y = annotate_xy[4], x = annotate_xy[3], ##### HERE IS CHANGE VALUE
parse = TRUE, size = 5,
label = as.expression(bquote(delta~"="~.(params_true[[2]])))) + ##### HERE IS CHANGE SYMBOL AND VALUE
labs(
x = expression("Samples of parameter" ~ delta), ##### HERE IS CHANGE SYMBOL
y = "Density")   +
stat_function(aes(y = NULL),
fun=dgamma,
args=list(shape=priorhp[3], rate=priorhp[4]),
colour = "lightblue", geom="area", fill="lightblue", alpha=0.2)
d_plot = df_burn_in %>%
ggplot(aes(x = d, y = ..density..)) +
geom_histogram(fill = "#f5c04a", colour = "grey15", alpha = 0.85) +
geom_vline(aes(xintercept = params_true[3]), size = 1.1, linetype = 2,
colour = '#4f5157') +
scale_x_continuous(breaks = scales::pretty_breaks(n = 5),
limits = c(x_limits[5], x_limits[6])) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 7)
) +
annotate("text", y = annotate_xy[6], x = annotate_xy[5], ##### HERE IS CHANGE VALUE
parse = TRUE, size = 5,
label = as.expression(bquote(gamma~"="~.(params_true[[3]])))) + ##### HERE IS CHANGE SYMBOL AND VALUE
labs(
x = expression("Samples of parameter" ~ gamma), ##### HERE IS CHANGE SYMBOL
y = "Density")   +
stat_function(aes(y = NULL),
fun=dgamma,
args=list(shape=priorhp[5], rate=priorhp[6]),
colour = "lightblue", geom="area", fill="lightblue", alpha=0.2)
hist_plots = grid.arrange(beta_plot, g_plot, d_plot, nrow = 1)
return(hist_plots)
}
## Data manipulation
library(tidyverse)
## Plotting
library(ggplot2)
library(ggcorrplot)
source("SEIRVisualisationFunctions.R")
## MCMC Diagnostics
library(coda)
## Epidemics
library(EpidemicR) # For simulating and making inference on GSE epidemics
## Write up
library(xtable)
# Associated infection rate matrix
params <- c(0.25, 0.08, 0.22)
# Simulated states
# sim_states <- read.csv("Data/simulated_data.csv", header = F)
# Simulated events
# sim_events <- read.csv("Data/simulated_track.csv", header = F)
# Simulated states
sim_states <- read.csv("Data/simulated_data_1000_agg_1.csv", header = F)
# Simulated events
sim_events <- read.csv("Data/simulated_track_1000_agg_1.csv", header = F)
# Load in the inference
res_11 = read.csv("Inference/Set 1/agg_30/res.csv")
other_res_11 = read.csv("Inference/Set 1/agg_30/other_res.csv")
aug_res_11 = read.csv("Inference/Set 1/agg_30/aug_res.csv")
## Summarise the results
## Summarise the results
# summary(res_11[-(1:500000), 1:3])
# summary(other_res_11[-(1:500000), c(3,5,6)])
# summary(aug_res_11[-(1:500000), c(1,5,9,13)])
apply(res_11[-(1:500000) , ], 2, function(column) {
mean <- mean(column)  # Calculate standard deviation
rounded_std_dev <- signif(mean, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
apply(res_11[-(1:500000) , ], 2, function(column) {
quantiles <- quantile(column, c(0.025, 0.975))
rounded_quantiles <- signif(quantiles, digits = 3)  # Round to 3 significant figures
return(rounded_quantiles)
})
apply(res_11[-(1:500000) , ], 2, function(column) {
std_dev <- sd(column)  # Calculate standard deviation
rounded_std_dev <- signif(std_dev, digits = 3)  # Round to 3 significant figures
return(rounded_std_dev)
})
coda::effectiveSize(res_11)
hist_plot_w_prior_11 = gg_hist_plot_w_prior(res_11, params, 500000, c(60000, 0.1, 110000, 0.1, 80000, 0.1), c(0, 1.3, 0.001, 0.003, 0, 0.7), c(5, 0.05, 1.6, 0.05, 4.4, 0.05))
hist_plot_w_prior_11
hist_plot_w_prior_11 = gg_hist_plot_w_prior(res_11, params, 500000, c(60000, 0.1, 110000, 0.1, 80000, 0.1), c(0, 1.3, 0.001, 0.003, 0, 0.7), c(0.05, 5, 1.6, 0.05, 4.4, 0.05))
